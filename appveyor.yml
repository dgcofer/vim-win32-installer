version: "{build}"

image: Visual Studio 2015

# Build only on tags
skip_non_tags: true

environment:
  matrix:
    - ARCH: x64
#    - ARCH: x86

matrix:
  fast_finish: true

# Shallow clone cannot be used when using git-submodule
shallow_clone: false

build:
  verbosity: minimal

before_build:
  - '"C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" %ARCH%'
  - '"%APPVEYOR_BUILD_FOLDER%\appveyor.bat" install'

build_script:
  - '"%APPVEYOR_BUILD_FOLDER%\appveyor.bat" build'

after_build:
  - '"%APPVEYOR_BUILD_FOLDER%\appveyor.bat" package'

test_script:
  - '"%APPVEYOR_BUILD_FOLDER%\appveyor.bat" test'

artifacts:
#  - path: gvim_*_x86.zip
#    name: gVim_x86
#  - path: gvim_*_x86_pdb.zip
#    name: gVim_x86_pdb
#  - path: gvim_*_x86.exe
#    name: gVim_x86_installer
#64bit
  - path: gvim_*_x64.zip
    name: gVim_x64
  - path: gvim_*_x64_pdb.zip
    name: gVim_x64_pdb
  - path: gvim_*_x64.exe
    name: gVim_x64_installer

before_deploy:
  - for /f "delims=" %%i in (gitlog.txt) do set GITLOG=%%i

deploy:
  - provider: GitHub
    description: |
      Nightly Vim Windows build snapshots ([more information](http://vim.wikia.com/wiki/Where_to_download_Vim)).

      ### Changes:

      $(GITLOG)

      Download and execute the most recent gvim_8.._x86.exe file to install Vim.
      The exe file contains the (32bit) installer while the .zip files contain an
      archive of the 32bit (_x86) or 64bit versions (_x64). To install it, extract
      the archive and update your PATH variable. The installer will do that
      automatically and provide some additional extensions (e.g. Edit with Vim menu).
      The gvim...pdb.zip file only contains the corresponding pdb files for debugging the binaries.

      If you need a dynamic interface to Perl, Python2, Python3, Ruby, TCL, Lua or Racket/MzScheme,
      make sure you also install the following. Vim will work without it, but some Plugin
      might need this additional dependency. (e.g. Gundo needs a working Python2 installation,
      Command-T needs a working Ruby installation and Neocomplete needs a working Lua
      installation). This means, those interpreters have to be installed in addition to Vim.
      Without it Vim won't be able to use that feature! You can find those interperters here:

      * [ActivePerl](http://www.activestate.com/activeperl/downloads) 5.24
      * [ActiveTcl](http://www.activestate.com/activetcl/downloads) 8.6.6
      * [LuaBinaries](http://luabinaries.sourceforge.net/download.html) 5.3
      * [Python](https://www.python.org/downloads/) 2.7
      * [Python3](https://www.python.org/downloads/) 3.6
      * [Racket](https://download.racket-lang.org/) 6.10.1
      * [RubyInstaller2](http://rubyinstaller.org/downloads/) 2.4

      Make sure that you install the same architecture (32bit/64bit) that matches your Vim installation.
    auth_token:
      # Update the following key, once this is merged to Vim main repository:
      secure: FDsdMSiivkIefnn/6n3aRiTgMgcrJkiCVQfIT7JkUV06rQKVCtI4IyNpx6sI4U3R
    artifact: /gVim/
    draft: false
    prerelease: false
    on:
      appveyor_repo_tag: true

cache:
  - downloads -> appveyor.bat

# vim: ts=2 sw=2 et
